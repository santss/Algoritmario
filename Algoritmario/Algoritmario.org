#+TITLE: Algoritmario
* Índice :toc:
- [[#introducción][Introducción]]
- [[#estructuras-de-datos][Estructuras de Datos]]
  - [[#trie][Trie]]
  - [[#árboles][Árboles]]
- [[#algoritmos][Algoritmos]]
  - [[#sorts][Sorts]]
  - [[#búsquedas][Búsquedas]]
  - [[#teoría-de-números][Teoría de Números]]

* Introducción

Este es el algoritmario que hemos compilado como equipo /TinMarin/.

* Estructuras de Datos

** Trie

#+begin_src C++

#+end_src

** Árboles

*** Auto Balancing Tree(ABT)

#+begin_src C++

#+end_src

*** Binary Search Tree (BST)

#+begin_src C++

#+end_src

* Algoritmos

** Sorts

*** Bubble Sort =O(n^2)=

El algoritmo clásico con una complejidad de =О(n^2)=.

#+begin_src C++
int *bubblesort(int n[])
{
  for (int i = 0; i < N; i++)
    {
      for (int  j = 0; j < N-1 ; j++)
        {
          if (n[j]>n[j+1])
            {
              swap(n[j],n[j+1]);
            }
        }
    }
  return n;
}
#+end_src
*** Heap Sort =O(nlog(n))=

**** Priority Queue
#+begin_src C++
int *heapSort(int n[])
  {
    return n;
  }
#+end_src
**** Con Heap

** Búsquedas
*** En Amplitud
#+begin_src C++
#include<iostream>
#include<queue>
#include <string>

using namespace std;

struct casillas{
	short x,y;
	short movimientos = 0;
	bool usado=false;
};

int busquedaEnAmplitud(pair<short,short> inicio, pair<short,short> fin);

int main(void)
{
	pair<short,short> par_Inicio;
	pair<short,short> par_Fin;
	string cadena;
	while(getline(cin,cadena))
	{
		par_Inicio=make_pair(cadena[0]-'a',cadena[1]-'0'-1);
		par_Fin=make_pair(cadena[3]-'a',cadena[4]-'0'-1);
		cout<<"To get from "<<cadena[0]<<cadena[1]<<" to "<<cadena[3]<<cadena[4]<<" takes "<<busquedaEnAmplitud(par_Inicio,par_Fin)<<" knight moves.\n";
	}

	return 0;

}

int busquedaEnAmplitud(pair<short,short> inicio, pair<short,short> finn){

	casillas casilla[8][8];
	int sumas[4][2]={{2,1},{2,-1},{-2,1},{-2,-1}};
	for(int i=0; i<8; i++)
		for(int j=0; j<8; j++){
			casilla[i][j].x=i;
			casilla[i][j].y=j;
		}

	queue<casillas> cola;

	casilla[inicio.first][inicio.second].movimientos=0;
	casillas actual = casilla[inicio.first][inicio.second];
	casilla[inicio.first][inicio.second].usado=true;
	cola.push( casilla[inicio.first][inicio.second]);

	while(cola.front().x!=finn.first || cola.front().y!=finn.second){

		for(int i=0; i<8; i++){
			if(i<=3)
			{
				if(actual.x+sumas[i][0]<=7 && actual.x+sumas[i][0]>=0 && actual.y+sumas[i][1]<=7 && actual.y+sumas[i][1]>=0 &&
						casilla[actual.x+sumas[i][0]][actual.y+sumas[i][1]].usado==false)
				{
					if(actual.x+sumas[i][0]==finn.first && actual.y+sumas[i][1]==finn.second)
					{
						return actual.movimientos+1;
					}
					else
					{
						casilla[actual.x+sumas[i][0]][actual.y+sumas[i][1]].movimientos=actual.movimientos+1;
						casilla[actual.x+sumas[i][0]][actual.y+sumas[i][1]].usado=true;
						cola.push(casilla[actual.x+sumas[i][0]][actual.y+sumas[i][1]]);
					}
				}
			}else{

				if(actual.x+sumas[i-4][1]<=7 && actual.x+sumas[i-4][1]>=0 && actual.y+sumas[i-4][0]<=7 && actual.y+sumas[i-4][0]>=0 &&
						casilla[actual.x+sumas[i-4][1]][actual.y+sumas[i-4][0]].usado==false)
				{
					if(actual.x+sumas[i-4][1]==finn.first && actual.y+sumas[i-4][0]==finn.second)
					{
						return actual.movimientos+1;
					}
					else
					{
						casilla[actual.x+sumas[i-4][1]][actual.y+sumas[i-4][0]].movimientos=actual.movimientos+1;
						casilla[actual.x+sumas[i-4][1]][actual.y+sumas[i-4][0]].usado=true;
						cola.push(casilla[actual.x+sumas[i-4][1]][actual.y+sumas[i-4][0]]);
					}
				}

			}
		}//fin del for

		 /*for(int h=0; h<8; h++)
		 {
		   for(int t=0; t<8; t++)
		   {
			cout << casilla[h][t].movimientos<< " ";
		   }
		   cout<<endl;
		 }
		system("sleep 1");
		system("clear");*/
		cola.pop();
		actual=cola.front();
	} //fin del while

	return 0;
}
#+end_src
** Teoría de Números

*** Pascal

Lo que te genera esta función es un rectángulo de pascal, si quieres el triángulo
lo que tienes que hacer es acceder a los índices de i+j = k (siendo k, el índice que quieres).

#+begin_src C++
void pascal(void)
{
	/* Hace el triángulo de pascal */
	for (i = 1; i < N; i++)
	{
		for (j = 1; j < N; j++)
		{
			if (i == 1 || j == 1)
			{
				pascalRec[i][j] = 1;
				continue;
			}
			pascalRec[i][j] = pascalRec[i][j-1]+pascalRec[i-1][j];
		}
	}
}
#+end_src

*** Criba de Eratóstenes =O(nlog(n) log(log(n)))=

Un algoritmo para obtener los números primos.
Si quieres leer más, el algoritmo también lo puedes encontrar en [[https://es.m.wikibooks.org/wiki/Implementaci%C3%B3n_de_algoritmos_de_teor%C3%ADa_de_n%C3%BAmeros/Criba_de_Erat%C3%B3stenes][wikibooks]].

#+begin_src C++
long long int *criba(void)
{
  bool usados[N];
  static long long int primos[N];
  for (i = 0; i < N; i++)
    {
      usados[i] = true;
      primos[i] = 0;
    }

  for (i = 2; i < N; i++)
    {
      if (i*i < N)
        {
          for (j = i*i; j < N; j+=i)
              usados[j] = false;
        }
    }
  for (i = 2; i < N; i++)
    {
      if (usados[i] == true)
          primos[i] = primos[i-1]+1;
      else
        primos[i] = primos[i-1];
    }
  return primos;
}
#+end_src

*** Números demasiado grandes

**** Big Mod

Puedes sacar el residuo de números muy grandes.
#+begin_src C++
#include<iostream>

using namespace std;

void resultado(int b, int p, int m);

int main(){
    int b,p,m;
    while(cin>>b>>p>>m){ //b^p)%m
        resultado(b,p,m);
    }

    return 0;
}

void resultado(int b, int p, int m){
    long long int resultado=1,contador=b;
    while(p>0){
        if(p&1){
            resultado = (resultado*contador)%m;
        }

        contador *=contador;
        contador=contador%m;
        p /= 2;
    }

    cout<<resultado<<endl;
}
#+end_src
